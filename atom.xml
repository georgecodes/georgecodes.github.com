<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[George McIntosh]]></title>
  <link href="http://georgemcntosh.com/atom.xml" rel="self"/>
  <link href="http://georgemcntosh.com/"/>
  <updated>2013-11-29T12:16:36+00:00</updated>
  <id>http://georgemcntosh.com/</id>
  <author>
    <name><![CDATA[George McIntosh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JoAnn]]></title>
    <link href="http://georgemcntosh.com/joann/"/>
    <updated>2013-11-29T11:25:00+00:00</updated>
    <id>http://georgemcntosh.com/joann</id>
    <content type="html"><![CDATA[<p>Writing some tests recently, as is often the case, I found myself reaching for <a href="http://joda.org/joda-time">Joda Time</a>. This library,
as most Java devs know, is less painful to deal with than the date utilities that the JDK ships with. The other neat thing about it is,
you can set the system time - well, Joda&#8217;s view of it - to whatever you want. Very handy for testing code that might at some point create dates.</p>

<p>Anyways, a typical way of using Joda time in a test looks something like this</p>

<pre><code>class TestSomething {

    @Test
    void testthings() {

        DateTimeUtils.setCurrentMillisFixed(1385554748577L)

        // do some things

    }

    @After
    void reset() {

        DateTimeutils.setCurrentMillisSystem()

    }

}
</code></pre>

<p>A few things wrong here. First, it&#8217;s tedious having to work in milliseconds. Second it&#8217;s not especially legible, and thirdly you have to remember to reset the time to the real time <em>in a teardown method</em> in case your test fails.</p>

<p>So I came up with <a href="https://github.com/georgecodes/joann">JoAnn</a>, which makes things a bit simpler. JoAnn is so called because it&#8217;s a <strong>Jo</strong>da <strong>Ann</strong>otation. It looks a bit like this</p>

<pre><code>@Test
@Joda(1385554748577L)
void testthings() {
    // do some things
}
</code></pre>

<p>That&#8217;s (almost) it. No time fiddling bleeding into your tests, no need to remember to tear it down. Just the annotation. Oh, and a way of getting it invoked. You can use either a JUnit runner, or a JUnit rule, it makes no difference. I&#8217;ve provided both</p>

<h2>With a rule</h2>

<pre><code>class MyTests {

  @Rule public JodaRule rule = new JodaRule()

}
</code></pre>

<h2>With a runner</h2>

<pre><code>@RunWith(JodaAwareJUnit4Runner)
class MyTests {

}
</code></pre>

<p>It gets even less tedious.</p>

<p>You don&#8217;t have to use milliseconds to set the time. Set a timestamp instead, and JoAnn will assume you meant an ISO8601 format</p>

<pre><code>@Test
@Joda(timestamp = "2013-11-29T10:13:22.192Z")
void testTheThings() {}
</code></pre>

<p>Or there are a few more out of the box:</p>

<pre><code>@Test
@Joda(timestamp = '2013-12-25', format = Format.YYYYMMDD)
void testMoreStuff() {}

@Test
@Joda(timestamp = '2012-11-19 13:03:22', format = Format.YYYYMMDD_HHMMSS)
void keepOnTesting() {}
</code></pre>

<p>Want to see the code? It&#8217;s on <a href="https://github.com/georgecodes/joann">GitHub</a></p>

<p>Want to use it in a Maven project? I&#8217;m hosting it myself for now:</p>

<pre><code>&lt;dependencies&gt;
  &lt;dependency&gt;
        &lt;groupId&gt;com.elevenware&lt;/groupId&gt;
        &lt;artifactId&gt;joann&lt;/artifactId&gt;
        &lt;version&gt;1.0&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;

&lt;repositories&gt;
    &lt;repository&gt;
        &lt;snapshots&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
        &lt;/snapshots&gt;
        &lt;id&gt;elevenware-releases&lt;/id&gt;
        &lt;url&gt;http://maven.elevenware.com/repo/releases&lt;/url&gt;
    &lt;/repository&gt;
&lt;/repositories&gt;
</code></pre>

<p>Enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VCR and Aruba]]></title>
    <link href="http://georgemcntosh.com/vcr-and-aruba/"/>
    <updated>2013-06-29T16:08:00+01:00</updated>
    <id>http://georgemcntosh.com/vcr-and-aruba</id>
    <content type="html"><![CDATA[<p>I&#8217;m working on a few little command-line utilities at the moment, written in Ruby. They all use a web service somewhere along the way. This raised an interesting question: How do I test these things?</p>

<p>Obviously, when testing individual components, I can use something like the excellent <a href="https://github.com/vcr/vcr">VCR</a> library. And for testing the CLI, I&#8217;m using Cucumber and <a href="https://github.com/cucumber/aruba">Aruba</a>. As a bit of background, Aruba extends Cucumber by letting you invoke console commands, and capture the stdout for matching in your feature files. This presented a small problem. VCR works by hooking itself into your HTTP library at a really low level, but Aruba launches my gem in a whole new process, which won&#8217;t be under the control of my test code.</p>

<p>tl;dr VCR can&#8217;t magically hook into classes of a separate Ruby process.</p>

<p>Luckily, Aruba has a trick up its sleeve. If the thing you&#8217;re testing is written in Ruby, it can be launched in-process, which means my VCR config would work! It&#8217;s actually pretty straight-forward. Let&#8217;s write a simple <a href="http://whatisthor.com">Thor</a> app that fetches random advice, tested by Aruba and VCR.</p>

<p>The full source for this exercise is on <a href="https://github.com/georgecodes/advice-grabber">Github</a>.</p>

<p>The setup is simple enough. Use Bundler to create your new gem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle gem advice</span></code></pre></td></tr></table></div></figure>


<p>Then add Thor, VCR, WebMock, Cucumber and Aruba to your dependencies by adding this to your gemspec file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  spec.add_development_dependency "vcr"
</span><span class='line'>  spec.add_development_dependency "webmock"
</span><span class='line'>  spec.add_development_dependency "cucumber"
</span><span class='line'>  spec.add_development_dependency "aruba"
</span><span class='line'>  spec.add_dependency "thor"</span></code></pre></td></tr></table></div></figure>


<p>And create the basic Cucumber/VCR layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p features/support</span></code></pre></td></tr></table></div></figure>


<p>Now we write our feature:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Feature: The advice CLI
</span><span class='line'>  In order to get some random advice
</span><span class='line'>  As a CLI user
</span><span class='line'>  I want to request advice
</span><span class='line'>
</span><span class='line'>  Scenario: get some advice
</span><span class='line'>    When I run `advice please`
</span><span class='line'>    Then the output should contain:
</span><span class='line'>     """
</span><span class='line'>      some advice
</span><span class='line'>     """  </span></code></pre></td></tr></table></div></figure>


<p>Run Cucumber (using Bundler)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec cucumber</span></code></pre></td></tr></table></div></figure>


<p>Missing steps, of course! So now we do our environment setup. Create a file called &#8216;features/support/env.rb&#8217; that looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'aruba/cucumber'</span></code></pre></td></tr></table></div></figure>


<p>And run <em>bundle exec cucumber</em> again. Now we&#8217;re getting somewhere. Your test can&#8217;t actually find anything to run. So let&#8217;s create it. Create &#8216;bin/advice&#8217; with the following content.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env ruby
</span><span class='line'>require 'advice'
</span><span class='line'>Advice::CLI.start(ARGV)</span></code></pre></td></tr></table></div></figure>


<p>Now create the actual CLI class in &#8216;lib/advice/cli.rb&#8217;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'thor'
</span><span class='line'>require 'open-uri'
</span><span class='line'>require 'json'
</span><span class='line'>
</span><span class='line'>module Advice
</span><span class='line'>  class CLI &lt; Thor
</span><span class='line'>
</span><span class='line'>    desc "please", "fetches random advice from the Internet"
</span><span class='line'>    def please
</span><span class='line'>     the_advice = JSON.parse( open('http://api.adviceslip.com/advice').string)
</span><span class='line'>     puts the_advice['slip']['advice']
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Now we have a failing test. Problem is, it will <em>always</em> fail, because we get a random different result every time. So let&#8217;s introduce VCR. Edit your env.rb file to look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'aruba/cucumber'
</span><span class='line'>require 'vcr'
</span><span class='line'>require 'webmock'
</span><span class='line'>
</span><span class='line'>VCR.cucumber_tags do |t|
</span><span class='line'>  t.tag  '@vcr', :use_scenario_name =&gt; true
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>VCR.configure do |c|
</span><span class='line'>  c.hook_into :webmock
</span><span class='line'>  c.cassette_library_dir     = 'features/cassettes'
</span><span class='line'>  c.default_cassette_options = { :record =&gt; :new_episodes }
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>And add some support for VCR in our feature, by adding the @vcr tag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Feature: The advice CLI
</span><span class='line'>  In order to get some random advice
</span><span class='line'>  As a CLI user
</span><span class='line'>  I want to request advice
</span><span class='line'>
</span><span class='line'>  @vcr
</span><span class='line'>  Scenario: get some advice
</span><span class='line'>    When I run `advice please`
</span><span class='line'>    Then the output should contain:
</span><span class='line'>     """
</span><span class='line'>      some advice
</span><span class='line'>     """</span></code></pre></td></tr></table></div></figure>


<p>What we&#8217;re doing in the env.rb file, is configuring VCR to detect when the feature has the @vcr tag, and use the feature name as a cassette name. If you&#8217;re unfamiliar with VCR, it records HTTP responses in YAML files called &#8216;cassettes&#8217; (it can use other formats, but this isn&#8217;t a VCR tutorial so I&#8217;ll not go into that).</p>

<p>If we were to run Cucumber now, it&#8217;s fairly reasonable to expect the fetched web response to be recorded. But of course, it won&#8217;t, because VCR is hooking into the HTTP library in the Ruby process that&#8217;s running <em>our tests</em>, but the web calls are being made in a process spawned by Aruba. Go ahead and run it, nothing gets captured.</p>

<p>This is where our magic comes in. Add the following to the top of your env.rb:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'advice'</span></code></pre></td></tr></table></div></figure>


<p>then add</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class VcrFriendlyMain
</span><span class='line'>  def initialize(argv, stdin, stdout, stderr, kernel)
</span><span class='line'>    @argv, @stdin, @stdout, @stderr, @kernel = argv, stdin, stdout, stderr, kernel
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def execute!
</span><span class='line'>    $stdin = @stdin
</span><span class='line'>    $stdout = @stdout
</span><span class='line'>    Advice::CLI.start(@argv)
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Before('@vcr') do
</span><span class='line'>  Aruba::InProcess.main_class = VcrFriendlyMain
</span><span class='line'>  Aruba.process = Aruba::InProcess
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>After('@vcr') do
</span><span class='line'>  Aruba.process = Aruba::SpawnProcess
</span><span class='line'>  VCR.eject_cassette
</span><span class='line'>  $stdin = STDIN
</span><span class='line'>  $stdout = STDOUT
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>to the bottom.</p>

<p>What we&#8217;re doing here is, telling Aruba to spawn our custom class above, which we use to bootstrap our Advice CLI. The contents of our binary launcher have been duplicated here, which is a mild annoyance, but that should be doing virtually nothing anyway. We hook up the Aruba-provided stdin and stdout, and we&#8217;re good to go. Our test will fail for the very last time. Obviously, we need to know what it is we&#8217;ve captured. So in your feature, replace &#8220;some advice&#8221; with whatever was actually returned last time. In my case, &#8220;Don&#8217;t be afraid to ask questions.&#8221;</p>

<p>There. Every time you run Cucumber, the client will behave exactly as in production, except the web call is intercepted, and the same response is given, keeping your tests reliable.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's my job, again?]]></title>
    <link href="http://georgemcntosh.com/whats-my-job/"/>
    <updated>2012-11-29T13:04:00+00:00</updated>
    <id>http://georgemcntosh.com/whats-my-job</id>
    <content type="html"><![CDATA[<p>For years now, it’s been an in-joke amongst my friends – few of whom work in IT in any way at all – that my job is to “fix computers”. It all started back when I was a software engineer for an EFT vendor, and was on a 24 hour support rota. One of my friends assumed that, when the pager – remember them? – went off, it was so that I could slide away and fix someone’s computer. Why? Because she had very little idea what I actually did, even though she knew my job title.</p>

<p>Similarly, my parents never really grokked what I do, either. At one point my father asked “so you make up your own programs?” having mildly grasped that there was even such a thing as a ‘program’ not long before. “Well, not exactly my own, but yes” was the best I could do. According to my girlfriend, I “work with that complete gobbledegook that makes no sense”; inf fact, I’m reliably informed, when anyone else asks her what I do for a living, the reply is along the lines of “he puts a load of gobbledegook on a screen”.</p>

<p>The point of this post is not, however, to ridicule civilians for not understanding the software lifecycle, or anything else. It’s not to ridicule them at all.</p>

<p>It’s because I, too, struggle to actually define what I do these days.</p>

<p>This is a brand new blog, to replace my most recent attempt at blogging, which was – and this is pertinent – called <a href="http://georgecodes.com">George Codes</a>. There are two reasons I’m moving away from that. The first is quite pragmatic: up until very recently, the domain name georgemcintosh.com has been selfishly hogged by some American heating company or something, and I’ve been unable to get my paws on it. By chance, I checked recently, and it was available, finally, so vanity won out, and I grabbed it.</p>

<p>The other reason is, I’m not sure “George codes” really adequately captures what I do any more. I mean, I do still write code, but I noticed a while back that, whenever anyone asked me the inevitable “so what do you do for a living?”, my answer stopped starting with the words “I am a” and began starting with a vague description of what I do. “I build software”, or “Oh, I build web apps”, or something else. Which is true. I do that. But I do a lot of other things, too. I just don’t think “coder”, or “developer”, or “programmer” or any other word that means “writes source code”, cut the mustard any more.</p>

<p><strong>I am not my stack, dammit</strong></p>

<p>I’ve never been a fan of being described as a “<something> developer”. Whether that something is a language – I hate being described by recruiters as a “Java developer”, especially since I haven’t written a line of Java in over 2 years – or a framework – some might currently say I’m a “Grails developer” – or even an entire field, such as “web developer”, the term always seems to do me a dis-service. I am not my stack. I am not pigeon-holed that way. I’ll give anything a go. This is a WordPress blog, using a theme I’m evolving myself. My [company website[(http://elevenware.com) is build on <a href="http://sinatrarb.com">Sinatra</a>, and I have a spattering of Grails and Rails apps kicking around the Internet. It’s irrelevant. I’ve also written a bunch of messaging apps, and rich client apps, and all sorts of things, in ‘C’, Java, C#, whatever. None of them define me.</p>

<p>So I have long disliked being called a “<something> developer” because “something” can mean so many different things. Now, I don’t like the developer bit, either. It’s not what I do any more. Here are some examples of things I do in my day job, which do not make me a developer, are not necessarily required in order to be called a developer, and which are also done by people who definitely are not developers:</p>

<ul>
<li>Provision servers</li>
<li>Build continuous integration environments</li>
<li>Script single-click deploys</li>
<li>Coach developers on how to code</li>
<li>Advise clients on their software architecture</li>
<li>Advise clients on better approaches to requirements capture</li>
<li>Help clients choose technology stacks for the right reasons</li>
<li>Define development processes</li>
<li>Challenge designs that seem inadequate or wrong</li>
<li>Ask clients questions that lead them to figure out that they meant something other than they first thought they did</li>
</ul>


<p><a href="http://en.wikipedia.org/wiki/Weasel_word">Many will argue</a> that some or all of the above is actually still within the remit of the developer. That doesn’t change the fact that when civilians hear the word “developer”, none of the above leap to mind. All that leaps to mind is “he writes gobbledegook on a screen, and makes a computer do something”.</p>

<p>So what do I do? I have no idea. I do something&#8230;with software&#8230;</p>

<p>I can write software. I can help others write it. I can take it from being an idea, to the inkling of a plan, to being source code, to being a tested, deployed artefact. I can decide what sort of platform to build it on. I can often build those platforms, in nice efficient, repeatable ways. I can script. I can automate stuff. I can motivate people. I can test stuff, I can even write automated tests. I can spot when a practice is worth doing, and when it might not be, after all.</p>

<p>I can’t define what I do in simple terms, but that’s ok. I’m betting that most people can’t, if they try hard enough not to.</p>
]]></content>
  </entry>
  
</feed>
